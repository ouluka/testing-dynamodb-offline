service: serverless-node-api

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
      # noStart: true
    migration:
      dir: offline/migrations

provider:
  lambdaHashingVersion: "20201221"
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  memorySize: 128
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  get:
    handler: src/index.index
    events:
      - http:
          path: /
          method: POST
          cors: true
  create:
    handler: src/users/create.create
    events:
      - http:
          path: users
          method: POST
          cors: true
  list:
    handler: src/users/list.list
    events:
      - http:
          path: users
          method: GET
          cors: true
  # get:
  #   handler: src/users/get.get
  #   events:
  #     - http:
  #         path: users/{id}
  #         method: get
  #         cors: true
  # update:
  #   handler: src/users/update.update
  #   events:
  #     - http:
  #         path: users/{id}
  #         method: put
  #         cors: true
  # delete:
  #   handler: src/users/delete.delete
  #   events:
  #     - http:
  #         path: users/{id}
  #         method: delete
  #         cors: true

resources:
  Resources:
    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: users-dev
